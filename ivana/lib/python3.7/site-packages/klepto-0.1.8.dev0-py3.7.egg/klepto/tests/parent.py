from klepto._cache import no_cache
from klepto import archives
from random import random
import inspect
arch = archives.dir_archive('cache_class')

@no_cache(cache=arch)
class Base:
    pass

@no_cache(cache=arch)
class Parent:
    def __init__(self, val):
        self.val = int(1000 * random())

@no_cache(cache=arch)
class ParentNew:
    def __new__(cls, val):
        # print('in ParentNew __new__', cls)
        return super(ParentNew, cls).__new__(cls)

    def __init__(self, val):
        self.val = int(1000 * random())

@no_cache(cache=arch)
class Child(ParentNew):
    def __init__(self, val):
        self.val = int(1000 * random())

@no_cache(cache=arch) 
class ChildNew(ParentNew):
    def __new__(cls, val):
        # print('in ChildNew __new))', cls)
        return super(ChildNew, cls).__new__(cls, val)

@no_cache(cache=arch) 
class ChildBoth(ParentNew):
    def __new__(cls, val):
        return super(ChildBoth, cls).__new__(cls, val)

    def __init__(self, val):
        self.val = int(1000 * random())
